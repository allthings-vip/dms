spring.profiles.active: local
spring.application.name: dms
dubbo.port: 28012

server:
  port: 8080
  compression:
    enabled: true
    mime-types: application/json

zookeeper.connectString: mt-zookeeper-vip:2181
iot.rocketmq.brokers: mt-rocketMqDispatch-vip:9876

logging:
  file: /httx/logs/out.log

spring:
  datasource:
    # 启动时自动运行的 SQL 文件
    continue-on-error: true
    druid:
      url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: com.mysql.jdbc.Driver
      # 连接池配置
      # 初始化大小，最小，最大
      initial-size: 300
      min-idle: 30
      max-active: 300
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 监控配置
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
      stat-view-servlet:
        enabled: true
        url-pattern: /sys/druid/*
        reset-enable: fasle
        login-username: iotadmin
        login-password: 0plmko
      filter:
        stat:
          log-slow-sql: true
          slow-sql-millis: 5000
          merge-sql: true
    type: com.alibaba.druid.pool.DruidDataSource
  jpa:
    show-sql: false
    database: MYSQL
    properties.hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
    hibernate:
      use-new-id-generator-mappings: false
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


iot:
  service:
    level: 5
    code: ${spring.application.name}


eureka:
  client:
    healthcheck:
      enabled: true
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}


management:
  endpoints:
    web:
      exposure:
        include: "*"

ribbon:
  eureka:
    enabled: true
